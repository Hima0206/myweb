pipeline {
    agent any

    tools {
        maven "3.9.9"
    }

    environment {
        SONAR_URL = "http://192.168.10.162:9000"
        IMAGE_NAME = "himateja0206/springbootapp"
        DEPLOYMENT_FILE = "myweb/springBoot.yml"
        PLACEHOLDER_TAG = "replaceImageTag"
        GIT_REPO_NAME = "myweb"
        GIT_USER_NAME = "Himateja0206"
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'java', url: 'https://github.com/Hima0206/myweb.git'
            }
        }

        stage('Maven Build') {
            steps {
                sh "mvn clean package"
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        mvn clean verify sonar:sonar \
                          -Dsonar.host.url=$SONAR_URL \
                          -Dsonar.token=$SONAR_AUTH_TOKEN \
                          -Dsonar.plugins.downloadOnlyRequired=true \
                          -Dsonar.scm.disabled=true \
                          -Dsonar.cpd.exclusions=**/*.xml \
                          -Dsonar.exclusions=**/target/**,**/*.xml \
                          -Dsonar.sources=src/main/java \
                          -Dsonar.tests=src/test/java \
                          -Dsonar.java.binaries=target/classes
                    '''
                }
            }
        }

        stage('Artifact Upload') {
            steps {
                nexusArtifactUploader artifacts: [
                    [
                        artifactId: 'myweb',
                        classifier: '',
                        file: 'target/myweb-8.2.0.war',
                        type: 'war'
                    ]
                ],
                credentialsId: 'nexus3',
                groupId: 'in.javahome',
                nexusUrl: '192.168.10.157:8081',
                nexusVersion: 'nexus3',
                protocol: 'http',
                repository: 'sample-releases',
                version: '8.2.0'
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withCredentials([string(credentialsId: 'DOCKER_CRED', variable: 'DOCKER_HUB_CREDENTIALS')]) {
                    sh '''
                        docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .
                        docker login -u himateja0206 -p ${DOCKER_HUB_CREDENTIALS}
                        docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'java', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "Himateja0206@gmail.com"
                        git config user.name "Himateja0206"
                        sed -i "s|${IMAGE_NAME}:${PLACEHOLDER_TAG}|${IMAGE_NAME}:${BUILD_NUMBER}|g" ${DEPLOYMENT_FILE}
                        git add ${DEPLOYMENT_FILE}
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
